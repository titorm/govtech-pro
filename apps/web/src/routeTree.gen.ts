/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TrackImport } from './routes/track'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedProfileImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedProtocolsImport } from './routes/_authenticated/protocols'
import { Route as AuthenticatedServicesImport } from './routes/_authenticated/services'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'

// Create Virtual Routes

const TrackLazyImport = createFileRoute('/track')()
const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const AuthenticatedLazyImport = createFileRoute('/_authenticated')()
const AuthenticatedProfileLazyImport = createFileRoute('/_authenticated/profile')()
const AuthenticatedProtocolsLazyImport = createFileRoute('/_authenticated/protocols')()
const AuthenticatedServicesLazyImport = createFileRoute('/_authenticated/services')()
const AuthenticatedDashboardLazyImport = createFileRoute('/_authenticated/dashboard')()

// Create/Update Routes

const TrackRoute = TrackImport.update({
  path: '/track',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/track').then((d) => d.Route))

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_authenticated').then((d) => d.Route))

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/profile').then((d) => d.Route))

const AuthenticatedProtocolsRoute = AuthenticatedProtocolsImport.update({
  path: '/protocols',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/protocols').then((d) => d.Route))

const AuthenticatedServicesRoute = AuthenticatedServicesImport.update({
  path: '/services',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/services').then((d) => d.Route))

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/dashboard').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: '/_authenticated'
      fullPath: '/_authenticated'
      preLoaderRoute: typeof AuthenticatedLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/track': {
      id: '/track'
      path: '/track'
      fullPath: '/track'
      preLoaderRoute: typeof TrackLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/_authenticated/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/protocols': {
      id: '/_authenticated/protocols'
      path: '/protocols'
      fullPath: '/_authenticated/protocols'
      preLoaderRoute: typeof AuthenticatedProtocolsLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/_authenticated/profile'
      preLoaderRoute: typeof AuthenticatedProfileLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/services': {
      id: '/_authenticated/services'
      path: '/services'
      fullPath: '/_authenticated/services'
      preLoaderRoute: typeof AuthenticatedServicesLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute.addChildren({
    AuthenticatedDashboardRoute,
    AuthenticatedProtocolsRoute,
    AuthenticatedProfileRoute,
    AuthenticatedServicesRoute,
  }),
  LoginRoute,
  RegisterRoute,
  TrackRoute,
})

/* prettier-ignore-end */