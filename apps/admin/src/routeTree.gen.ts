/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedServicesImport } from './routes/_authenticated/services'
import { Route as AuthenticatedReportsImport } from './routes/_authenticated/reports'
import { Route as AuthenticatedProtocolsImport } from './routes/_authenticated/protocols'
import { Route as AuthenticatedUsersImport } from './routes/_authenticated/users'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const AuthenticatedLazyImport = createFileRoute('/_authenticated')()
const AuthenticatedSettingsLazyImport = createFileRoute('/_authenticated/settings')()
const AuthenticatedServicesLazyImport = createFileRoute('/_authenticated/services')()
const AuthenticatedReportsLazyImport = createFileRoute('/_authenticated/reports')()
const AuthenticatedProtocolsLazyImport = createFileRoute('/_authenticated/protocols')()
const AuthenticatedUsersLazyImport = createFileRoute('/_authenticated/users')()
const AuthenticatedDashboardLazyImport = createFileRoute('/_authenticated/dashboard')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_authenticated').then((d) => d.Route))

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/settings').then((d) => d.Route))

const AuthenticatedServicesRoute = AuthenticatedServicesImport.update({
  path: '/services',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/services').then((d) => d.Route))

const AuthenticatedReportsRoute = AuthenticatedReportsImport.update({
  path: '/reports',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/reports').then((d) => d.Route))

const AuthenticatedProtocolsRoute = AuthenticatedProtocolsImport.update({
  path: '/protocols',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/protocols').then((d) => d.Route))

const AuthenticatedUsersRoute = AuthenticatedUsersImport.update({
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/users').then((d) => d.Route))

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/dashboard').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: '/_authenticated'
      fullPath: '/_authenticated'
      preLoaderRoute: typeof AuthenticatedLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/_authenticated/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/protocols': {
      id: '/_authenticated/protocols'
      path: '/protocols'
      fullPath: '/_authenticated/protocols'
      preLoaderRoute: typeof AuthenticatedProtocolsLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/reports': {
      id: '/_authenticated/reports'
      path: '/reports'
      fullPath: '/_authenticated/reports'
      preLoaderRoute: typeof AuthenticatedReportsLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/services': {
      id: '/_authenticated/services'
      path: '/services'
      fullPath: '/_authenticated/services'
      preLoaderRoute: typeof AuthenticatedServicesLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/_authenticated/settings'
      preLoaderRoute: typeof AuthenticatedSettingsLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/_authenticated/users'
      preLoaderRoute: typeof AuthenticatedUsersLazyImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute.addChildren({
    AuthenticatedDashboardRoute,
    AuthenticatedProtocolsRoute,
    AuthenticatedReportsRoute,
    AuthenticatedServicesRoute,
    AuthenticatedSettingsRoute,
    AuthenticatedUsersRoute,
  }),
  LoginRoute,
})

/* prettier-ignore-end */